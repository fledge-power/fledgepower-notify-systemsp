/*
 * Fledge filter mvcyclingcheck.
 *
 * Copyright (c) 2020, RTE (https://www.rte-france.com)
 *
 * Released under the Apache 2.0 Licence
 *
 * Author: Yannick Marchetaux
 * 
 */
#include <version.h>
#include <plugin_api.h>

#include "notifySystemSp.h"
#include "constantsSystem.h"

using namespace systemspn;

static const char *default_config = QUOTE({
		"plugin" : {
			"description" : "Notification delivery plugin that sends system status points readings periodically or on demand from notification",
            "type" : "string",
			"default" : FILTER_NAME,
			"readonly" : "true"
			},
		"enable": {
			"description": "A switch that can be used to enable or disable execution of the filter.",
			"displayName": "Enabled",
			"type": "boolean",
			"default": "true"
			},
		"exchanged_data" : {
			"description" : "exchanged data list",
			"type" : "JSON",
			"displayName" : "Exchanged data list",
			"order" : "3",
			"default" : QUOTE({
				"exchanged_data": {         
					"datapoints" : [          
						{
							"label":"TS-1",
							"pivot_id":"M_2367_3_15_4",
							"pivot_type":"SpsTyp",
							"pivot_subtypes": [
								"acces"
							],
							"ts_syst_cycle" :30,
							"protocols":[
								{
									"name":"IEC104",
									"typeid":"M_ME_NC_1",
									"address":"3271612"
								}
							]
						},
						{
							"label":"TS-2",
							"pivot_id":"M_2367_3_15_5",
							"pivot_type":"DpsTyp",
							"pivot_subtypes": [
								"prt.inf"
							],
							"protocols":[
								{
									"name":"IEC104",
									"typeid":"M_ME_NC_1",
									"address":"3271612"
								}
							]
						}
					]
				}
			})
   		}
	});

/**
 * The Filter plugin interface
 */
extern "C" {

/**
 * The plugin information structure
 */
static PLUGIN_INFORMATION info = {
        FILTER_NAME, 			           // Name
		VERSION,				           // Version
        SP_INGEST,                         // Flags
        PLUGIN_TYPE_NOTIFICATION_DELIVERY, // Type
        "1.0.0",                           // Interface version
		default_config	                   // Default plugin configuration
};

/**
 * Return the information about this plugin
 */
PLUGIN_INFORMATION *plugin_info() {
	return &info;
}

/**
 * Initialise the plugin, called to get the plugin handle and setup the
 * output handle that will be passed to the output stream. The output stream
 * is merely a function pointer that is called with the output handle and
 * the new set of readings generated by the plugin.
 *     (*output)(outHandle, readings);
 *
 * @param config	The configuration category for the filter
 * @param outHandle	A handle that will be passed to the output stream
 * @param output	The output stream (function pointer) to which data is passed
 * @return		An opaque handle that is used in all subsequent calls to the plugin
 */
PLUGIN_HANDLE plugin_init(ConfigCategory* config)
{
	auto notifySystemSp = new NotifySystemSp();
 	notifySystemSp->reconfigure(*config);
	return (PLUGIN_HANDLE)notifySystemSp;
}

/**
 * Deliver received notification data
 *
 * @param handle		The plugin handle returned from plugin_init
 * @param deliveryName		The delivery category name
 * @param notificationName	The notification name
 * @param triggerReason		The trigger reason for notification
 * @param message		The message from notification
 */
bool plugin_deliver(PLUGIN_HANDLE handle,
                    const std::string& deliveryName,
                    const std::string& notificationName,
                    const std::string& triggerReason,
                    const std::string& message)
{
	auto notifySystemSp = (NotifySystemSp *)handle;
	return notifySystemSp->notify(notificationName, triggerReason, message);
}

/**
 * Register a callback function used to ingest a reading to the Fledge buffer
 */
void plugin_registerIngest(PLUGIN_HANDLE *handle, void *func, void *data)
{
	auto notifySystemSp = (NotifySystemSp *)handle;
	notifySystemSp->registerIngest((FuncPtr)func, data);
	return;
}

/**
 * Plugin reconfiguration entry point
 *
 * @param	handle	The plugin handle
 * @param	newConfig	The new configuration data
 */
void plugin_reconfigure(PLUGIN_HANDLE *handle, const std::string& newConfig)
{
	auto notifySystemSp = (NotifySystemSp *)handle;
	ConfigCategory	config("newConfig", newConfig);
	notifySystemSp->reconfigure(config);
}

/**
 * Call the shutdown method in the plugin
 */
void plugin_shutdown(PLUGIN_HANDLE *handle)
{
	auto notifySystemSp = (NotifySystemSp *)handle;
	delete notifySystemSp;
}

// End of extern "C"
};

